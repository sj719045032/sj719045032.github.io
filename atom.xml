<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stone&#39;s blog!</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sj719045032.github.io/"/>
  <updated>2016-04-15T02:37:51.635Z</updated>
  <id>http://sj719045032.github.io/</id>
  
  <author>
    <name>Stone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>��������ʽ�ٲ���</title>
    <link href="http://sj719045032.github.io/2016/04/15/regular-expression/"/>
    <id>http://sj719045032.github.io/2016/04/15/regular-expression/</id>
    <published>2016-04-15T02:28:34.000Z</published>
    <updated>2016-04-15T02:37:51.635Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;img/regular-expression.png&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;img/regular-expression.png&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016阿里实习生第一次电话面试总结</title>
    <link href="http://sj719045032.github.io/2016/03/08/ali-interview/"/>
    <id>http://sj719045032.github.io/2016/03/08/ali-interview/</id>
    <published>2016-03-08T03:58:08.000Z</published>
    <updated>2016-03-14T01:42:02.954Z</updated>
    
    <content type="html">&lt;p&gt;　　　　2016年3月7日，晚上接到了人生中第一次电话面试-阿里实习生招聘电话面试。打来电话的是一个姐姐，下面是一些问题。&lt;/p&gt;
&lt;h3 id=&quot;1-angular数据双向绑定的原理，以及与检测对象改变的实现双向绑定有什么不同&quot;&gt;&lt;a href=&quot;#1-angular数据双向绑定的原理，以及与检测对象改变的实现双向绑定有什么不同&quot; class=&quot;headerlink&quot; title=&quot;1.angular数据双向绑定的原理，以及与检测对象改变的实现双向绑定有什么不同&quot;&gt;&lt;/a&gt;1.angular数据双向绑定的原理，以及与检测对象改变的实现双向绑定有什么不同&lt;/h3&gt;&lt;p&gt;   当时答得不太好。后面上网查了资料，发现这篇文章讲得比较详细&lt;a href=&quot;http://sentsin.com/web/779.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sentsin.com/web/779.html&lt;/a&gt;.简言之，从模型到ui的更新，通过$digest循环遍历该作用域注册的所有watch，对比模型值是否改变，如果出现新值就把变化更新到视图上。从UI更新到模型，核心是$apply函数，如果是使用angular扩展的事件，那么angular就是自动调用$apply函数然后启动watch检测，将数据变化更新到模型。&lt;/p&gt;
&lt;h3 id=&quot;2-angular依赖注入&quot;&gt;&lt;a href=&quot;#2-angular依赖注入&quot; class=&quot;headerlink&quot; title=&quot;2.angular依赖注入&quot;&gt;&lt;/a&gt;2.angular依赖注入&lt;/h3&gt;&lt;p&gt;   在angular有下面三种方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过数组标注在方法的参数中声明依赖（优先考虑）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义在控制器构造方法的$inject属性中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过方法参数名隐式的添加(有些注意事项)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数组标注&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myModule.controller(&amp;apos;myController&amp;apos;,[&amp;apos;$scope&amp;apos;,&amp;apos;myService&amp;apos;,function($scope,myService){
//your code.            
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在第二个数组类型的参数中声明了两个依赖$scope,myService.后面的function中的参数$scope,myService与前面生命的依赖一一对应，可以改成符合js命名规范的任意标示符，比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myModule.controller(&amp;apos;myController&amp;apos;,[&amp;apos;$scope&amp;apos;,&amp;apos;myService&amp;apos;,function(myScope,aService){
//your code.            
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样myScope便对应$scope服务，aService对应myService。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$inject属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myController=function($scope,myService){
//your code.            
}];
 myController.$inject=[&amp;apos;$scope&amp;apos;,&amp;apos;myService&amp;apos;];
 myModule.controller(&amp;apos;myController&amp;apos;,myController);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐式声明依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myModule.controller(&amp;apos;myController&amp;apos;,function($scope,myService){
       //your code.            
       });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将构造函数的参数设为需要依赖的服务名，这样注入器就会自动查找需要依赖的服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-闭包及其优缺点&quot;&gt;&lt;a href=&quot;#3-闭包及其优缺点&quot; class=&quot;headerlink&quot; title=&quot;3.闭包及其优缺点&quot;&gt;&lt;/a&gt;3.闭包及其优缺点&lt;/h3&gt;&lt;p&gt;   闭包定义：javascript允许使用内部函数，内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：&lt;ul&gt;
&lt;li&gt;不增加额外的全局变量。&lt;/li&gt;
&lt;li&gt;执行过程中所有变量都是在匿名函数内部。&lt;/li&gt;
&lt;li&gt;加强封装性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。&lt;/li&gt;
&lt;li&gt;闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-ajax优缺点&quot;&gt;&lt;a href=&quot;#4-ajax优缺点&quot; class=&quot;headerlink&quot; title=&quot;4.ajax优缺点&quot;&gt;&lt;/a&gt;4.ajax优缺点&lt;/h3&gt;&lt;p&gt;   ajax：AJAX全称为“Asynchronous JavaScript and XML”（异步JavaScript和XML），是一种创建交互式网页应用的网页开发技术。它使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用XHTML+CSS来标准化呈现；&lt;/li&gt;
&lt;li&gt;使用XML和XSLT进行数据交换及相关操作；&lt;/li&gt;
&lt;li&gt;使用XMLHttpRequest对象与Web服务器进行异步数据通信； &lt;/li&gt;
&lt;li&gt;使用Javascript操作Document Object Model进行动态显示及交互； &lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用JavaScript绑定和处理所有数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：&lt;ul&gt;
&lt;li&gt;无刷新更新数据&lt;/li&gt;
&lt;li&gt;异步与服务器通信&lt;/li&gt;
&lt;li&gt;前端和后端负载平衡&lt;/li&gt;
&lt;li&gt;基于标准被广泛支持&lt;/li&gt;
&lt;li&gt;界面与应用分离&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;无法使用Back和History功能&lt;/li&gt;
&lt;li&gt;安全问题 AJAX暴露了与服务器交互的细节&lt;/li&gt;
&lt;li&gt;对搜索引擎的支持比较弱&lt;/li&gt;
&lt;li&gt;破坏了程序的异常机制&lt;/li&gt;
&lt;li&gt;违背URL和资源定位的初衷&lt;/li&gt;
&lt;li&gt;客户端过肥，太多客户端代码造成开发上的成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-javascript中的this理解&quot;&gt;&lt;a href=&quot;#5-javascript中的this理解&quot; class=&quot;headerlink&quot; title=&quot;5.javascript中的this理解&quot;&gt;&lt;/a&gt;5.javascript中的this理解&lt;/h3&gt;&lt;p&gt;   this是Javascript语言的一个关键字它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用，随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作为对象方法调用&lt;br&gt; 如果函数作为某个对象的方法调用，那么this绑定到这个对象上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function myFunc() {
   console.log(this.x);
}
var myObject = {};
myObject.x = &amp;quot;stone&amp;quot;;
myObject.myFunc = myFunc;
myObject.myFunc();//输出为‘stone’
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;作为函数调用&lt;br&gt;  如果函数直接作为函数调用，那么this绑定到全局对象，浏览器中也就是window。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var x = &amp;apos;stone&amp;apos;;
function myFunc() {
         this.x = &amp;quot;water&amp;quot;;
         console.log(this.x);
}
myFunc();//输出为‘water’
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;作为构造函数调用&lt;br&gt;  作为构造函数，this指向生成的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Stone() {
         this.name = &amp;quot;stone&amp;quot;;
}
myStone = new Stone();
console.log(myStone.name);//输出‘stone’
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过apply/call调用&lt;br&gt;  apply/call可以改变函数的调用对象，他们的第一个参数代表改变后调用这个函数的对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name = &amp;apos;Global&amp;apos;;
var Stone = {
    name: &amp;apos;Stone&amp;apos;
};
function showName() {
    console.log(this.name);
}
showName.apply();//输出为‘Global’,未改变this指向
showName.apply(Stone);//输出为‘Stone’，this指向为Stone对象
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自执行函数&lt;br&gt;  自行函数this指向全局对象，浏览器中是window&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name=&amp;apos;Global&amp;apos;;
var Stone={
   name:&amp;apos;stone&amp;apos;,
   showName:function(){
       console.log(this.name);
       (function(){
           console.log(this.name);
       })();
   }
};
Stone.showName();//输出stone Global
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;6-js事件代理（委托）&quot;&gt;&lt;a href=&quot;#6-js事件代理（委托）&quot; class=&quot;headerlink&quot; title=&quot;6.js事件代理（委托）&quot;&gt;&lt;/a&gt;6.js事件代理（委托）&lt;/h3&gt;&lt;p&gt;  事件阶段：事件捕获-&amp;gt;目标-&amp;gt;事件冒泡&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;事件捕获阶段&lt;/p&gt;
&lt;p&gt; 事件的第一个阶段是捕获阶段。事件从文档的根节点出发，随着DOM树的结构向事件的目标节点流去。途中经过各个层次的DOM节点，并在各节点上触发捕获事件，直到到达时间的目标节点。捕获阶段的主要任务是遍历传播路径，在冒泡阶段，时间会通过这个路径回溯到文档根节点。在实际应用中，我们并没有太多使用捕获阶段监听的用例，但是通过在捕获阶段对事件的处理，我们可以阻止类似click事件在某个特定元素上被触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标阶段&lt;/p&gt;
&lt;p&gt; 当事件到达目标节点时，事件就进入了目标阶段。事件在目标节点上被触发，然后逆向回流，知道传播到最外层的文档节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;冒泡阶段&lt;/p&gt;
&lt;p&gt; 事件在目标事件上触发后，并不在这个元素上终止。它会随着DOM树一层层向上冒泡，直到到达最外层的根节点。也就是说，同一事件会一次在目标节点的父节点，父节点的父节点…直到最外层的节点上触发。 &lt;/p&gt;
&lt;p&gt;事件代理：把事件处理器添加到一个父级元素上。默认情况下，由于事件在目标元素上面触发后，还会一次冒泡到DOM树最上层，所以事件代理得以实现。这样我们可以在上层元素通过判断事件的目标，来对目标元素采取相应的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;7-position几种属性&quot;&gt;&lt;a href=&quot;#7-position几种属性&quot; class=&quot;headerlink&quot; title=&quot;7.position几种属性&quot;&gt;&lt;/a&gt;7.position几种属性&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;absolute&lt;/td&gt;
&lt;td&gt;生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fixed&lt;/td&gt;
&lt;td&gt;生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relative&lt;/td&gt;
&lt;td&gt;生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inherit&lt;/td&gt;
&lt;td&gt;规定应该从父元素继承 position 属性的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;8-display属性&quot;&gt;&lt;a href=&quot;#8-display属性&quot; class=&quot;headerlink&quot; title=&quot;8.display属性&quot;&gt;&lt;/a&gt;8.display属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;inline(行内元素)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和其他元素都在一行上&lt;/li&gt;
&lt;li&gt;元素的高度、宽度、行高及顶部和底部边距不可设置&lt;/li&gt;
&lt;li&gt;元素的宽度就是它包含的文字或图片的宽度，不可改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;block(块元素)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个块级元素都从新的一行开始，并且其后的元素也另起一行&lt;/li&gt;
&lt;li&gt;元素的高度、宽度、行高以及顶和底边距都可设置&lt;/li&gt;
&lt;li&gt;元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;inline-block&lt;/p&gt;
&lt;p&gt;inline-block既具有block的宽高特性又具有inline的同行元素特性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9-BFC-Block-formatting-context-块级格式化上下文&quot;&gt;&lt;a href=&quot;#9-BFC-Block-formatting-context-块级格式化上下文&quot; class=&quot;headerlink&quot; title=&quot;9.BFC(Block formatting context)块级格式化上下文&quot;&gt;&lt;/a&gt;9.BFC(Block formatting context)块级格式化上下文&lt;/h3&gt;&lt;p&gt;   它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BFC布局规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部的Box会在垂直方向，一个接一个地放置。&lt;/li&gt;
&lt;li&gt;Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠&lt;/li&gt;
&lt;li&gt;每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。&lt;/li&gt;
&lt;li&gt;BFC的区域不会与float box重叠。&lt;/li&gt;
&lt;li&gt;BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。&lt;/li&gt;
&lt;li&gt;计算BFC的高度时，浮动元素也参与计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;产生BFC的元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根元素&lt;/li&gt;
&lt;li&gt;float属性不为none&lt;/li&gt;
&lt;li&gt;position为absolute或fixed&lt;/li&gt;
&lt;li&gt;display为inline-block, table-cell, table-caption, flex, inline-flex&lt;/li&gt;
&lt;li&gt;overflow不为visible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;10-OSI七层模型&quot;&gt;&lt;a href=&quot;#10-OSI七层模型&quot; class=&quot;headerlink&quot; title=&quot;10.OSI七层模型&quot;&gt;&lt;/a&gt;10.OSI七层模型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSI层&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;文件传输，电子邮件，文件服务，虚拟终端&lt;/td&gt;
&lt;td&gt;TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表示层&lt;/td&gt;
&lt;td&gt;数据格式化，代码转换，数据加密&lt;/td&gt;
&lt;td&gt;没有协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;会话层&lt;/td&gt;
&lt;td&gt;解除或建立与别的接点的联系&lt;/td&gt;
&lt;td&gt;没有协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;提供端对端的接口&lt;/td&gt;
&lt;td&gt;TCP，UDP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;为数据包选择路由&lt;/td&gt;
&lt;td&gt;IP，ICMP，RIP，OSPF，BGP，IGMP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;传输有地址的帧以及错误检测功能&lt;/td&gt;
&lt;td&gt;SLIP，CSLIP，PPP，ARP，RARP，MTU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;以二进制数据形式在物理媒体上传输数据&lt;/td&gt;
&lt;td&gt;ISO2110，IEEE802，IEEE802.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;11-http&quot;&gt;&lt;a href=&quot;#11-http&quot; class=&quot;headerlink&quot; title=&quot;11 http&quot;&gt;&lt;/a&gt;11 http&lt;/h3&gt;&lt;p&gt;   HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;工作流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始&lt;/li&gt;
&lt;li&gt;建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。&lt;/li&gt;
&lt;li&gt;服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。&lt;/li&gt;
&lt;li&gt;客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常用状态吗&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;消息&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;200（成功）&lt;/td&gt;
&lt;td&gt;服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;301（永久移动）&lt;/td&gt;
&lt;td&gt;请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;302（临时移动）&lt;/td&gt;
&lt;td&gt;服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;304（未修改）&lt;/td&gt;
&lt;td&gt;自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;404（未找到）&lt;/td&gt;
&lt;td&gt;服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;503（服务不可用）&lt;/td&gt;
&lt;td&gt;服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　　　2016年3月7日，晚上接到了人生中第一次电话面试-阿里实习生招聘电话面试。打来电话的是一个姐姐，下面是一些问题。&lt;/p&gt;
&lt;h3 id=&quot;1-angular数据双向绑定的原理，以及与检测对象改变的实现双向绑定有什么不同&quot;&gt;&lt;a href=&quot;#1-angular数据
    
    </summary>
    
    
      <category term="面试" scheme="http://sj719045032.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://sj719045032.github.io/2016/03/03/simple_grammar/"/>
    <id>http://sj719045032.github.io/2016/03/03/simple_grammar/</id>
    <published>2016-03-03T12:10:57.000Z</published>
    <updated>2016-03-08T04:31:57.747Z</updated>
    
    <content type="html">&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;p&gt;#一级标题&lt;/p&gt;
&lt;p&gt;##二级级标题&lt;/p&gt;
&lt;p&gt;###三级标题&lt;/p&gt;
&lt;p&gt;####四级标题&lt;/p&gt;
&lt;p&gt;#####五级标题&lt;/p&gt;
&lt;p&gt;######六级标题&lt;/p&gt;
&lt;p&gt;#列表&lt;/p&gt;
&lt;h2 id=&quot;无序列表&quot;&gt;&lt;a href=&quot;#无序列表&quot; class=&quot;headerlink&quot; title=&quot;无序列表&quot;&gt;&lt;/a&gt;无序列表&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;br&gt;##内部列表&lt;/li&gt;
&lt;li&gt;外部&lt;ul&gt;
&lt;li&gt;内部&lt;/li&gt;
&lt;li&gt;内部&lt;/li&gt;
&lt;li&gt;内部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部&lt;ul&gt;
&lt;li&gt;内部&lt;/li&gt;
&lt;li&gt;内部&lt;/li&gt;
&lt;li&gt;内部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##有序列表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里是引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##图片与链接&lt;/p&gt;
&lt;p&gt;###链接&lt;br&gt;&lt;a href=&quot;http://git.oschina.net/XuChunH/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的主页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###图片&lt;br&gt;&lt;img src=&quot;http://git.oschina.net/uploads/17/82617_XuChunH.jpg?1441725952&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;##粗体与斜体&lt;br&gt;&lt;strong&gt;粗体&lt;/strong&gt;&lt;br&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;##表格？？？&lt;br&gt;| Tables        | Are           | Cool  |&lt;br&gt;| ————- |:————-:| —–:|&lt;br&gt;| col 3 is      | right-aligned | $1600 |&lt;br&gt;| col 2 is      | centered      |   $12 |&lt;br&gt;| zebra stripes | are neat      |    $1 |&lt;/p&gt;
&lt;p&gt;##代码&lt;br&gt;    public String s = “s”;//使用TAB键&lt;/p&gt;
&lt;p&gt;##分割线&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;p&gt;#一级标题&lt;/p&gt;
&lt;p&gt;##二级级标题&lt;/p&gt;
&lt;p&gt;###三级标题&lt;/p&gt;
&lt;p&gt;####四级标题&lt;/p&gt;
&lt;p&gt;#####五级标题&lt;/
    
    </summary>
    
    
      <category term="markdown" scheme="http://sj719045032.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>js闭包之我见</title>
    <link href="http://sj719045032.github.io/2016/03/03/bibao/"/>
    <id>http://sj719045032.github.io/2016/03/03/bibao/</id>
    <published>2016-03-03T11:02:06.000Z</published>
    <updated>2016-03-03T12:55:37.142Z</updated>
    
    <content type="html">&lt;p&gt;   对于闭包，我自己有一点简单的理解&lt;/p&gt;
&lt;h2 id=&quot;作用域链&quot;&gt;&lt;a href=&quot;#作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域链&quot;&gt;&lt;/a&gt;作用域链&lt;/h2&gt;&lt;p&gt;   js中函数查找变量的顺序是由内到外的，先查找函数内部的变量，再查找父函数中的变量，以此类推。&lt;/p&gt;
&lt;h2 id=&quot;内存回收机制&quot;&gt;&lt;a href=&quot;#内存回收机制&quot; class=&quot;headerlink&quot; title=&quot;内存回收机制&quot;&gt;&lt;/a&gt;内存回收机制&lt;/h2&gt;&lt;p&gt;   一般来说,一个函数在执行开始的时候,会给其中定义的变量划分内存空间保存,以备后面的语句所用,等到函数执行完毕返回了,这些变量就被认为是无用的了.对应的内存空间也就被回收了.&lt;/p&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;   如果这个函数内部又嵌套了另一个函数,而这个函数是有可能在外部被调用到的.并且这个内部函数又使用了外部函数的某些变量的话.这种内存回收机制就会出现问题.如果在外部函数返回后,又直接调用了内部函数,那么内部函数就无法读取到他所需要的外部函数中变量的值了.所以js解释器在遇到函数定义的时候,会自动把函数和他可能使用的变量(包括本地变量和父级和祖先级函数的变量(自由变量))一起保存起来.也就是构建一个闭包,这些变量将不会被内存回收器所回收,只有当内部的函数不可能被调用以后(例如被删除了,或者没有了指针),才会销毁这个闭包,而没有任何一个闭包引用的变量才会被下一次内存回收启动时所回收.&lt;br&gt;   下面来看一下一个例子&lt;br&gt;   java代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; li=&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;li.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   li[i].onclick=functon()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      alert(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;   html代码：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;   运行起来，大家可能很惊讶，全都弹框输出5;因为onclick绑定的函数都引用了同一个变量i，循环执行完后i=5；最后点击按钮时，调用函数，找到变量i=5，自然输出是5。&lt;br&gt;   我们可以改进一下改吗如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; li = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; li.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            li[i].onclick = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;j&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    alert(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;   如上面的代码所示，我们用一个匿名函数，传入i然后立即执行，并且返回需要绑定到onclick事件的函数。这样返回的函数都访问到的是匿名函数传入的i的值,即j的值。这里我们就用到了闭包的特性，因为onclick事件绑定了function（）{alert（j）}，所以虽然匿名函数已经执行完并返回了函数，但是局部变量j，仍然还可能被点击事件绑定的函数，还被保存着。当点击事件发生时便执行相应的函数，得到不同的结果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   对于闭包，我自己有一点简单的理解&lt;/p&gt;
&lt;h2 id=&quot;作用域链&quot;&gt;&lt;a href=&quot;#作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域链&quot;&gt;&lt;/a&gt;作用域链&lt;/h2&gt;&lt;p&gt;   js中函数查找变量的顺序是由内到外的，先查找函数内部的变量，再查
    
    </summary>
    
    
      <category term="闭包 javascript" scheme="http://sj719045032.github.io/tags/%E9%97%AD%E5%8C%85-javascript/"/>
    
  </entry>
  
  <entry>
    <title>javacript不能精确相加之0.1+0.2！=0.3</title>
    <link href="http://sj719045032.github.io/2016/03/03/javacript_add/"/>
    <id>http://sj719045032.github.io/2016/03/03/javacript_add/</id>
    <published>2016-03-03T08:10:57.000Z</published>
    <updated>2016-03-03T12:14:53.079Z</updated>
    
    <content type="html">&lt;p&gt;   很久以前发现js小数相加会不精确，网上很多方法是用toFix()函数取相应位数的小数，但是我觉得这个方法不太好,自己研究了一下，可以任意个数字精确相加，代码如下&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addAcc&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numbers=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//判断输入参数是一个并且认为是一个数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        numbers=&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        numbers=&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//将arguments对象转换成数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maxDecLength=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    numbers.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//找出最长的小数位数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; decStr = i.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (decStr.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;) !== &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; decLength = decStr.split(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (decLength &amp;gt; maxDecLength)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                maxDecLength = decLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; numbers.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//将小数转换成整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i*&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,maxDecLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;).reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//数字相加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)/&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,maxDecLength);&lt;span class=&quot;comment&quot;&gt;//得到最终结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  使用这个方法可以任意多小数相加，输入参数可以是相加数字的数字，也可以是单个的数字&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   很久以前发现js小数相加会不精确，网上很多方法是用toFix()函数取相应位数的小数，但是我觉得这个方法不太好,自己研究了一下，可以任意个数字精确相加，代码如下&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
    
      <category term="javascrippt" scheme="http://sj719045032.github.io/tags/javascrippt/"/>
    
  </entry>
  
</feed>
